{"version":3,"sources":["index.re","app.re","logo.svg","serviceWorker.js"],"names":["App","__webpack_require__","ReactDOMRe","ReasonReact","ServiceWorker","renderToElementWithId","element","undefined","make","unregister","React","LogoSvg","component","statelessComponent","exports","message","_","createElement","className","alt","src","module","p","r","__webpack_exports__","d","register","isLocalhost","Boolean","window","location","hostname","match","config","navigator","URL","process","origin","addEventListener","swUrl","concat","fetch","then","response","status","headers","get","indexOf","serviceWorker","ready","registration","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error"],"mappings":"0HAGA,IAAAA,EAAUC,EAAQ,GAClBC,EAAiBD,EAAQ,IACzBE,EAAkBF,EAAQ,GAC1BG,EAAoBH,EAAQ,IAE1BA,EAAQ,IAEVC,EAAAG,sBAAAF,EAAAG,aAAAC,SAAAP,EAAAQ,KAAA,2CAEAJ,EAAAK,2CCTA,IAAAC,EAAYT,EAAQ,GACpBU,EAAcV,EAAQ,GACtBE,EAAkBF,EAAQ,GAExBA,EAAQ,IAEV,IAAAW,EAAAT,EAAAU,mBAAA,OAiCAC,EAAAF,YACAE,EAAAN,KAhCA,SAAAO,EAAAC,GACA,OACAJ,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACA,WACA,OAAAF,EAAAO,cAAA,OACAC,UAAA,OACyBR,EAAAO,cAAA,OACzBC,UAAA,cAC6BR,EAAAO,cAAA,OAC7BC,UAAA,WACAC,IAAA,OACAC,IAAAT,IACiCD,EAAAO,cAAA,UAAAV,EAAAQ,IAAAL,EAAAO,cAAA,KACjCC,UAAA,aAC6B,uBAAAR,EAAAO,cAAA,YAAAV,EAAA,yCAE7BK,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,wBCtCAS,EAAAP,QAAiBb,EAAAqB,EAAuB,0FCAxCrB,EAAAsB,EAAAC,GAAAvB,EAAAwB,EAAAD,EAAA,6BAAAE,IAAAzB,EAAAwB,EAAAD,EAAA,+BAAAf,IAUA,IAAMkB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAIC,SAASN,EAASO,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIC,IAAIC,GAAwBP,OAAOC,UAC3CO,SAAWR,OAAOC,SAASO,OAIvC,OAGFR,OAAOS,iBAAiB,OAAQ,WAC9B,IAAMC,EAAK,GAAAC,OAAMJ,GAAN,sBAEPT,IA2DV,SAAiCY,EAAON,GAEtCQ,MAAMF,GACHG,KAAK,SAAAC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7Cb,UAAUc,cAAcC,MAAMP,KAAK,SAAAQ,GACjCA,EAAazC,aAAaiC,KAAK,WAC7Bb,OAAOC,SAASqB,aAKpBC,EAAgBb,EAAON,KAG1BoB,MAAM,WACLC,QAAQC,IACN,mEA/EAC,CAAwBjB,EAAON,GAI/BC,UAAUc,cAAcC,MAAMP,KAAK,WACjCY,QAAQC,IACN,+GAMJH,EAAgBb,EAAON,MAM/B,SAASmB,EAAgBb,EAAON,GAC9BC,UAAUc,cACPtB,SAASa,GACTG,KAAK,SAAAQ,GACJA,EAAaO,cAAgB,WAC3B,IAAMC,EAAmBR,EAAaS,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf3B,UAAUc,cAAcc,YAK1BR,QAAQC,IAAI,6CAGRtB,EAAO8B,UACT9B,EAAO8B,SAASb,KAMlBI,QAAQC,IAAI,sCAGRtB,EAAO+B,WACT/B,EAAO+B,UAAUd,SAO5BG,MAAM,SAAAY,GACLX,QAAQW,MAAM,4CAA6CA,KA+B1D,SAASxD,IACV,kBAAmByB,WACrBA,UAAUc,cAAcC,MAAMP,KAAK,SAAAQ,GACjCA,EAAazC","file":"static/js/main.7b9a7aa6.chunk.js","sourcesContent":["// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE\n'use strict';\n\nvar App = require(\"./app\");\nvar ReactDOMRe = require(\"reason-react/src/ReactDOMRe.js\");\nvar ReasonReact = require(\"reason-react/src/ReasonReact.js\");\nvar ServiceWorker = require(\"./serviceWorker\");\n\n((require('./index.css')));\n\nReactDOMRe.renderToElementWithId(ReasonReact.element(undefined, undefined, App.make(\"Welcome to React and Reason\", /* array */[])), \"root\");\n\nServiceWorker.unregister();\n\n/*  Not a pure module */\n","// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE\n'use strict';\n\nvar React = require(\"react\");\nvar LogoSvg = require(\"./logo.svg\");\nvar ReasonReact = require(\"reason-react/src/ReasonReact.js\");\n\n((require('./app.css')));\n\nvar component = ReasonReact.statelessComponent(\"App\");\n\nfunction make(message, _) {\n  return /* record */[\n          /* debugName */component[/* debugName */0],\n          /* reactClassInternal */component[/* reactClassInternal */1],\n          /* handedOffState */component[/* handedOffState */2],\n          /* willReceiveProps */component[/* willReceiveProps */3],\n          /* didMount */component[/* didMount */4],\n          /* didUpdate */component[/* didUpdate */5],\n          /* willUnmount */component[/* willUnmount */6],\n          /* willUpdate */component[/* willUpdate */7],\n          /* shouldUpdate */component[/* shouldUpdate */8],\n          /* render */(function () {\n              return React.createElement(\"div\", {\n                          className: \"App\"\n                        }, React.createElement(\"div\", {\n                              className: \"App-header\"\n                            }, React.createElement(\"img\", {\n                                  className: \"App-logo\",\n                                  alt: \"logo\",\n                                  src: LogoSvg\n                                }), React.createElement(\"h2\", undefined, message)), React.createElement(\"p\", {\n                              className: \"App-intro\"\n                            }, \"To get started, edit\", React.createElement(\"code\", undefined, \" src/app.re \"), \"and save to reload.\"));\n            }),\n          /* initialState */component[/* initialState */10],\n          /* retainedProps */component[/* retainedProps */11],\n          /* reducer */component[/* reducer */12],\n          /* jsElementWrapped */component[/* jsElementWrapped */13]\n        ];\n}\n\nexports.component = component;\nexports.make = make;\n/*  Not a pure module */\n","module.exports = __webpack_public_path__ + \"static/media/logo.e2342b05.svg\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}